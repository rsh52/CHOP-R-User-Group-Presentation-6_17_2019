my_ggtheme +
xlab("Patient Age (Years)") + ylab("Maximum HR (BPM)") +
ggtitle("Max HR By Age and Gender") +
scale_shape_discrete(name = "sex.c", labels = c("M", "F")) +
scale_color_discrete(name = "sex.c", labels = c("M", "F")) +
heart %>%
select(age, sex.c, thalach) %>%
ggplot(aes(x = age, y = thalach,  color = sex.c, shape = sex.c, group = sex.c)) +
my_ggtheme +
xlab("Patient Age (Years)") + ylab("Maximum HR (BPM)") +
ggtitle("Max HR By Age and Gender") +
scale_shape_discrete(name = "sex.c", labels = c("M", "F")) +
scale_color_discrete(name = "sex.c", labels = c("M", "F")) +
heart %>%
select(age, sex.c, thalach) %>%
ggplot(aes(x = age, y = thalach,  color = sex.c, shape = sex.c, group = sex.c)) +
my_ggtheme +
xlab("Patient Age (Years)") + ylab("Maximum HR (BPM)") +
ggtitle("Max HR By Age and Gender") +
scale_shape_discrete(name = "sex.c", labels = c("M", "F")) +
scale_color_discrete(name = "sex.c", labels = c("M", "F")) +
heart %>%
select(age, sex.c, thalach) %>%
ggplot(aes(x = age, y = thalach,  color = sex.c, shape = sex.c, group = sex.c)) +
my_ggtheme +
xlab("Patient Age (Years)") + ylab("Maximum HR (BPM)") +
ggtitle("Max HR By Age and Gender") +
scale_shape_discrete(name = "sex.c", labels = c("M", "F")) +
scale_color_discrete(name = "sex.c", labels = c("M", "F"))
heart %>%
select(age, sex.c, thalach) %>%
ggplot(aes(x = age, y = thalach,  color = sex.c, shape = sex.c, group = sex.c)) +
geom_point() + my_ggtheme +
xlab("Patient Age (Years)") + ylab("Maximum HR (BPM)") +
ggtitle("Max HR By Age and Gender") +
scale_shape_discrete(name = "sex.c", labels = c("M", "F")) +
scale_color_discrete(name = "sex.c", labels = c("M", "F"))
heart %>%
select(age, sex.c, thalach) %>%
ggplot(aes(x = age, y = thalach,  color = sex.c, shape = sex.c, group = sex.c, size = 2)) +
geom_point() + my_ggtheme +
xlab("Patient Age (Years)") + ylab("Maximum HR (BPM)") +
ggtitle("Max HR By Age and Gender") +
scale_shape_discrete(name = "sex.c", labels = c("M", "F")) +
scale_color_discrete(name = "sex.c", labels = c("M", "F"))
heart %>%
select(age, sex.c, thalach) %>%
ggplot(aes(x = age, y = thalach,  color = sex.c, shape = sex.c, group = sex.c)) +
geom_point() + my_ggtheme +
xlab("Patient Age (Years)") + ylab("Maximum HR (BPM)") +
ggtitle("Max HR By Age and Gender") +
scale_shape_discrete(name = "sex.c", labels = c("M", "F")) +
scale_color_discrete(name = "sex.c", labels = c("M", "F"))
heart %>%
select(age, sex.c, thalach) %>%
ggplot(aes(x = age, y = thalach,  color = sex.c, shape = sex.c, group = sex.c)) +
geom_point() + my_ggtheme +
xlab("Patient Age (Years)") + ylab("Maximum HR (BPM)") +
ggtitle("Max HR By Age and Gender") +
scale_shape_discrete(name = "sex.c", labels = c("M", "F")) +
scale_color_discrete(name = "sex.c", labels = c("M" = "red", "F"))
heart %>%
select(age, sex.c, thalach) %>%
ggplot(aes(x = age, y = thalach,  color = sex.c, shape = sex.c, group = sex.c)) +
geom_point() + my_ggtheme +
xlab("Patient Age (Years)") + ylab("Maximum HR (BPM)") +
ggtitle("Max HR By Age and Gender") +
scale_shape_discrete(name = "sex.c", labels = c("M", "F")) +
scale_color_discrete(name = "sex.c", labels = c("M", "F"))
heart %>%
select(age, sex.c, thalach) %>%
ggplot(aes(x = age, y = thalach,  color = sex.c, shape = sex.c)) +
geom_point() + my_ggtheme +
xlab("Patient Age (Years)") + ylab("Maximum HR (BPM)") +
ggtitle("Max HR By Age and Gender") +
scale_colour_manual(values = c("firebrick2", "dodgerblue3"))
heart %>%
select(age, sex.c, thalach) %>%
ggplot(aes(x = age, y = thalach,  color = sex.c, shape = sex.c, size = 2)) +
geom_point() + my_ggtheme +
xlab("Patient Age (Years)") + ylab("Maximum HR (BPM)") +
ggtitle("Max HR By Age and Gender") +
scale_colour_manual(values = c("firebrick2", "dodgerblue3"))
heart %>%
select(age, sex.c, thalach) %>%
ggplot(aes(x = age, y = thalach,  color = sex.c, shape = sex.c), size = 2) +
geom_point() + my_ggtheme +
xlab("Patient Age (Years)") + ylab("Maximum HR (BPM)") +
ggtitle("Max HR By Age and Gender") +
scale_colour_manual(values = c("firebrick2", "dodgerblue3"))
heart <- read.csv("heart.csv")
# my_ggtheme Declaration-------------------------------------------------------
my_ggtheme <- list(
theme_light(),
theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
plot.subtitle = element_text(hjust = 0.5, face = "bold")),
theme(axis.line = element_line(size = 3, colour = "grey80")),
theme(axis.text.x = element_text(angle = 65, hjust = 1, size = 12), text = element_text(size = 14)),
theme(strip.text.x = element_text(size = 16, colour = 'black'),
strip.text.y = element_text(size = 16, colour = 'black'))
)
# Declare new column to specify gender as a classifier and not an integer
heart$Gender <- heart$sex
heart$Gender[heart$Gender == 1] <- "M" # Replace all 1's with "M"
heart$Gender[heart$Gender == 0] <- "F" # Replace all 0's with "F"
heart %>%
select(age, Gender, thalach) %>%
ggplot(aes(x = age, y = thalach,  color = Gender, shape = Gender), size = 2) +
geom_point() + my_ggtheme +
xlab("Patient Age (Years)") + ylab("Maximum HR (BPM)") +
ggtitle("Max HR By Age and Gender") +
scale_colour_manual(values = c("firebrick2", "dodgerblue3"))
heart %>%
select(age, Gender, thalach) %>%
ggplot(aes(x = age, y = thalach,  color = Gender, shape = Gender), size = 3) +
geom_point() + my_ggtheme +
xlab("Patient Age (Years)") + ylab("Maximum HR (BPM)") +
ggtitle("Max HR By Age and Gender") +
scale_colour_manual(values = c("firebrick2", "dodgerblue3"))
heart %>%
select(age, Gender, thalach) %>%
ggplot(aes(x = age, y = thalach,  color = Gender, shape = Gender), size = 15) +
geom_point() + my_ggtheme +
xlab("Patient Age (Years)") + ylab("Maximum HR (BPM)") +
ggtitle("Max HR By Age and Gender") +
scale_colour_manual(values = c("firebrick2", "dodgerblue3"))
heart %>%
select(age, Gender, thalach) %>%
ggplot(aes(x = age, y = thalach,  color = Gender, shape = Gender)) +
geom_point(size = 2) + my_ggtheme +
xlab("Patient Age (Years)") + ylab("Maximum HR (BPM)") +
ggtitle("Max HR By Age and Gender") +
scale_colour_manual(values = c("firebrick2", "dodgerblue3"))
heart %>%
select(age, Gender, thalach) %>%
ggplot(aes(x = age, y = thalach,  color = Gender, shape = Gender)) +
geom_point(size = 5) + my_ggtheme +
xlab("Patient Age (Years)") + ylab("Maximum HR (BPM)") +
ggtitle("Max HR By Age and Gender") +
scale_colour_manual(values = c("firebrick2", "dodgerblue3"))
heart %>%
select(age, Gender, thalach) %>%
ggplot(aes(x = age, y = thalach,  color = Gender, shape = Gender)) +
geom_point(size = 3) + my_ggtheme +
xlab("Patient Age (Years)") + ylab("Maximum HR (BPM)") +
ggtitle("Max HR By Age and Gender") +
scale_colour_manual(values = c("firebrick2", "dodgerblue3"))
heart <- read.csv("Data_Files/heart.csv")
source("Data_Analytics_Files/Data_Wrangling.R")
head(heart)
# There's something here about thinking with your heart over your head but
# I can't quite put it together...
head(heart, row.names = F)
Max_HR_Gender.plot <- heart %>%
select(age, Gender, thalach) %>%
ggplot(aes(x = age, y = thalach,  color = Gender, shape = Gender)) +
geom_point(size = 3) + my_ggtheme +
xlab("Patient Age (Years)") + ylab("Maximum HR (BPM)") +
ggtitle("Max HR By Age and Gender") +
scale_colour_manual(values = c("firebrick2", "dodgerblue3"))
knit_with_parameters('C:/Users/hannar1/Desktop/CHOP R User Group/CHOP R User Group/CHOP R User Group.Rmd')
knitr::opts_chunk$set(echo = TRUE)
DT1_Gender.plot <- heart %>%
select(age, Gender, fbs, trestbps, thalach) %>%
ggplot(aes(x = age, y = params$DataType1, color = Gender, shape = Gender)) +
geom_point(size = 3) + my_ggtheme +
xlab("Patient Age (Years)") + ylab("Maximum HR (BPM)") +
ggtitle("Max HR By Age and Gender") +
scale_colour_manual(values = c("firebrick2", "dodgerblue3"))
knit_with_parameters('C:/Users/hannar1/Desktop/CHOP R User Group/CHOP R User Group/CHOP R User Group.Rmd')
```{r load data}
heart <- read.csv("Data_Files/heart.csv")
heart$oldpeak <- NULL
heart$slope <- NULL
knit_with_parameters('C:/Users/hannar1/Desktop/CHOP R User Group/CHOP R User Group/CHOP R User Group.Rmd')
knit_with_parameters('C:/Users/hannar1/Desktop/CHOP R User Group/CHOP R User Group/CHOP R User Group.Rmd')
knit_with_parameters('C:/Users/hannar1/Desktop/CHOP R User Group/CHOP R User Group/CHOP R User Group.Rmd')
knit_with_parameters('C:/Users/hannar1/Desktop/CHOP R User Group/CHOP R User Group/CHOP R User Group.Rmd')
knit_with_parameters('C:/Users/hannar1/Desktop/CHOP R User Group/CHOP R User Group/CHOP R User Group.Rmd')
knit_with_parameters('C:/Users/hannar1/Desktop/CHOP R User Group/CHOP R User Group/CHOP R User Group.Rmd')
knit_with_parameters('C:/Users/hannar1/Desktop/CHOP R User Group/CHOP R User Group/CHOP R User Group.Rmd')
heart %>%
select(age, Gender, chol, trestbps, thalach)
# Note the additional arguments inside of the curly brackets to help with proper
# sizing in the Word output.
source("Data_Analytics_Files/Data_Wrangling.R")
Max_HR_Gender.plot
heart %>%
select(age, Gender, chol, trestbps, thalach)
knit_with_parameters('C:/Users/hannar1/Desktop/CHOP R User Group/CHOP R User Group/CHOP R User Group.Rmd')
DT1_Gender.plot <- heart %>%
select(age, Gender, chol, trestbps, thalach) %>%
ggplot(aes(x = age, y = chol, color = Gender, shape = Gender)) +
geom_point(size = 3) + my_ggtheme +
xlab("Patient Age (Years)") + ylab("Label this Better (Units)") +
ggtitle("Data of Interest Age and Gender") +
scale_colour_manual(values = c("firebrick2", "dodgerblue3"))
DT1_Gender.plot
knit_with_parameters('C:/Users/hannar1/Desktop/CHOP R User Group/CHOP R User Group/CHOP R User Group.Rmd')
DT1_Gender.plot <- heart %>%
select(age, Gender, chol, trestbps, thalach) %>%
ggplot(aes(x = age, y = chol, color = Gender, shape = Gender)) +
geom_point(size = 3) + my_ggtheme +
xlab("Patient Age (Years)") + ylab("Label this Better (Units)") +
ggtitle("Data of Interest Age and Gender") +
scale_colour_manual(values = c("firebrick2", "dodgerblue3"))
DT1_Gender.plot
DT1_Gender.plot <- heart %>%
select(age, Gender, chol, trestbps, thalach) %>%
ggplot(aes(x = age, y = trestbps, color = Gender, shape = Gender)) +
geom_point(size = 3) + my_ggtheme +
xlab("Patient Age (Years)") + ylab("Label this Better (Units)") +
ggtitle("Data of Interest Age and Gender") +
scale_colour_manual(values = c("firebrick2", "dodgerblue3"))
DT1_Gender.plot
# Using a similar set-up to the code in our `source()` file:
DT1_Gender.plot <- heart %>%
select(age, Gender, chol, trestbps, thalach) %>%
ggplot(aes(x = age, y = thalach, color = Gender, shape = Gender)) +
geom_point(size = 3) + my_ggtheme +
xlab("Patient Age (Years)") + ylab("Label this Better (Units)") +
ggtitle("Data of Interest Age and Gender") +
scale_colour_manual(values = c("firebrick2", "dodgerblue3"))
DT1_Gender.plot
knit_with_parameters('C:/Users/hannar1/Desktop/CHOP R User Group/CHOP R User Group/CHOP R User Group.Rmd')
DT1.df <- heart %>%
select(age, Gender, thalach)
DT1.df
DT1.df[3]
heart %>%
ggplot(aes(x = age, y = DT1.df[3], color = Gender, shape = Gender)) +
geom_point(size = 3) + my_ggtheme +
xlab("Patient Age (Years)") + ylab("Label this Better (Units)") +
ggtitle("Data of Interest Age and Gender") +
scale_colour_manual(values = c("firebrick2", "dodgerblue3"))
DT1_Gender.plot <- heart %>%
ggplot(aes(x = age, y = DT1.df[3], color = Gender, shape = Gender)) +
geom_point(size = 3) + my_ggtheme +
xlab("Patient Age (Years)") + ylab("Label this Better (Units)") +
ggtitle("Data of Interest Age and Gender") +
scale_colour_manual(values = c("firebrick2", "dodgerblue3"))
DT1_Gender.plot
DT1.df[3]
knit_with_parameters('C:/Users/hannar1/Desktop/CHOP R User Group/CHOP R User Group/CHOP R User Group.Rmd')
knit_with_parameters('C:/Users/hannar1/Desktop/CHOP R User Group/CHOP R User Group/CHOP R User Group.Rmd')
knit_with_parameters('C:/Users/hannar1/Desktop/CHOP R User Group/CHOP R User Group/CHOP R User Group.Rmd')
knit_with_parameters('C:/Users/hannar1/Desktop/CHOP R User Group/CHOP R User Group/CHOP R User Group.Rmd')
knit_with_parameters('C:/Users/hannar1/Desktop/CHOP R User Group/CHOP R User Group/CHOP R User Group.Rmd')
knit_with_parameters('C:/Users/hannar1/Desktop/CHOP R User Group/CHOP R User Group/CHOP R User Group.Rmd')
knit_with_parameters('C:/Users/hannar1/Desktop/CHOP R User Group/CHOP R User Group/CHOP R User Group.Rmd')
knit_with_parameters('C:/Users/hannar1/Desktop/CHOP R User Group/CHOP R User Group/CHOP R User Group.Rmd')
knit_with_parameters('C:/Users/hannar1/Desktop/CHOP R User Group/CHOP R User Group/CHOP R User Group.Rmd')
install.packages(c("caTools", "ROCR"))
knit_with_parameters('C:/Users/hannar1/Desktop/CHOP R User Group/CHOP R User Group/CHOP R User Group/CHOP R User Group.Rmd', encoding = 'UTF-8')
knitr::opts_chunk$set(echo = TRUE)
knit_with_parameters('C:/Users/hannar1/Desktop/CHOP R User Group/CHOP R User Group/CHOP R User Group/CHOP R User Group.Rmd', encoding = 'UTF-8')
knit_with_parameters('C:/Users/hannar1/Desktop/CHOP R User Group/CHOP R User Group/CHOP R User Group/CHOP R User Group.Rmd', encoding = 'UTF-8')
knit_with_parameters('C:/Users/hannar1/Desktop/CHOP R User Group/CHOP R User Group/CHOP R User Group/CHOP R User Group.Rmd', encoding = 'UTF-8')
knit_with_parameters('C:/Users/hannar1/Desktop/CHOP R User Group/CHOP R User Group/CHOP R User Group/CHOP R User Group.Rmd', encoding = 'UTF-8')
heart <- read.csv("Data_Files/heart.csv")
knit_with_parameters('C:/Users/hannar1/Desktop/CHOP R User Group/CHOP R User Group/CHOP R User Group/CHOP R User Group.Rmd', encoding = 'UTF-8')
knit_with_parameters('C:/Users/hannar1/Desktop/CHOP R User Group/CHOP R User Group/CHOP R User Group/CHOP R User Group.Rmd', encoding = 'UTF-8')
heart <- read.csv("Data_Files/heart.csv")
# There's something here about thinking with your heart over your head but
# I can't quite put it together...
head(heart)
heart <- read.csv("Data_Files/heart.csv")
# For now we will keep this commented out until we review how to use parameters.
#heart <- params$data
# heart$oldpeak <- NULL
# heart$slope <- NULL
# There's something here about thinking with your heart over your head but
# I can't quite put it together...
head(heart)
# Note the additional arguments inside of the curly brackets to help with proper
# sizing in the Word output.
source("Data_Analytics_Files/Data_Wrangling.R")
# my_ggtheme Declaration-------------------------------------------------------
my_ggtheme <- list(
theme_light(),
theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
plot.subtitle = element_text(hjust = 0.5, face = "bold")),
theme(axis.line = element_line(size = 3, colour = "grey80")),
theme(axis.text.x = element_text(angle = 65, hjust = 1, size = 12), text = element_text(size = 14)),
theme(strip.text.x = element_text(size = 16, colour = 'black'),
strip.text.y = element_text(size = 16, colour = 'black'))
)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(caTools)
library(ROCR)
# Note the additional arguments inside of the curly brackets to help with proper
# sizing in the Word output.
source("Data_Analytics_Files/Data_Wrangling.R")
Max_HR_Gender.plot
# Using a similar set-up to the code in our `source()` file:
DT1_Gender.plot <- heart %>%
select(age, Gender, thalach) %>%
filter(age > params$MinAge & age < params$MaxAge) %>%
ggplot(aes(x = age, y = thalach,  color = Gender, shape = Gender)) +
geom_point(size = 3) + my_ggtheme +
xlab("Patient Age (Years)") + ylab("Maximum HR (BPM)") +
ggtitle("Max HR By Age and Gender") +
scale_colour_manual(values = c("firebrick2", "dodgerblue3"))
DT1_Gender.plot
# Sample Logistic Regression with `heart` dataset
set.seed(101) # Set a seed so results can be reproducible
# Remove the Gender column which is a duplicate of the sex column,
# name this `heart2`
heart2 <- heart
heart2$Gender <- NULL
# Create a sample train and test split of the data using the `caTools` package
sample <- sample.int(n = nrow(heart2), size = floor(.75*nrow(heart2)), replace = F)
train <- heart2[sample, ]
test  <- heart2[-sample, ]
# Fit a logistic regression model to the training dataset
model <- glm(target ~.,family=binomial(link='logit'),data=train)
# Assess the results of the model
summary(model)
anova(model)
anova(model)
head(heart)
head(heart2)
heart <- read.csv("Data_Files/heart.csv")
# For now we will keep this commented out until we review how to use parameters.
#heart <- params$data
# heart$oldpeak <- NULL
# heart$slope <- NULL
# There's something here about thinking with your heart over your head but
# I can't quite put it together...
head(heart)
# Note the additional arguments inside of the curly brackets to help with proper
# sizing in the Word output.
source("Data_Analytics_Files/Data_Wrangling.R")
Max_HR_Gender.plot
# Sample Logistic Regression with `heart` dataset
set.seed(101) # Set a seed so results can be reproducible
# Remove the Gender column which is a duplicate of the sex column,
# name this `heart.ml`
heart.ml <- heart
heart.ml$Gender <- NULL
# Create a sample train and test split of the data using the `caTools` package
sample <- sample.int(n = nrow(heart.ml), size = floor(.75*nrow(heart.ml)), replace = F)
train <- heart.ml[sample, ]
test  <- heart.ml[-sample, ]
# Fit a logistic regression model to the training dataset
model <- glm(target ~.,family=binomial(link='logit'),data=train)
# Assess the results of the model
summary(model)
head(heart.ml)
# Test model accuracy
fitted.results <- predict(model,newdata=test[1:13],type='response')
fitted.results <- ifelse(fitted.results > 0.5,1,0)
misClasificError <- mean(fitted.results != test$target)
print(paste('Accuracy',1-misClasificError))
p <- predict(model, newdata=test[1:13], type="response")
pr <- prediction(p, test$target)
prf <- performance(pr, measure = "tpr", x.measure = "fpr")
plot(prf)
auc <- performance(pr, measure = "auc")
auc <- auc@y.values[[1]]
auc
knit_with_parameters('C:/Users/hannar1/Desktop/CHOP R User Group/CHOP R User Group/CHOP R User Group/CHOP R User Group.Rmd', encoding = 'UTF-8')
knit_with_parameters('C:/Users/hannar1/Desktop/CHOP R User Group/CHOP R User Group/CHOP R User Group/CHOP R User Group.Rmd', encoding = 'UTF-8')
knit_with_parameters('C:/Users/hannar1/Desktop/CHOP R User Group/CHOP R User Group/CHOP R User Group/CHOP R User Group.Rmd', encoding = 'UTF-8')
knit_with_parameters('C:/Users/hannar1/Desktop/CHOP R User Group/CHOP R User Group/CHOP R User Group/CHOP R User Group.Rmd', encoding = 'UTF-8')
knit_with_parameters('C:/Users/hannar1/Desktop/CHOP R User Group/CHOP R User Group/CHOP R User Group/CHOP R User Group.Rmd', encoding = 'UTF-8')
knit_with_parameters('C:/Users/hannar1/Desktop/CHOP R User Group/CHOP R User Group/CHOP R User Group/CHOP R User Group.Rmd', encoding = 'UTF-8')
heart <- read.csv("Data_Files/heart.csv")
# For now we will keep this commented out until we review how to use parameters.
#heart <- read.csv(params$data)
# There's something here about thinking with your heart over your head but
# I can't quite put it together...
top.six <- head(heart)
row.names(top.six) <- NULL
top.six
knit_with_parameters('C:/Users/hannar1/Desktop/CHOP R User Group/CHOP R User Group/CHOP R User Group/CHOP R User Group.Rmd', encoding = 'UTF-8')
heart <- read.csv("Data_Files/heart.csv")
# For now we will keep this commented out until we review how to use parameters.
#heart <- read.csv(params$data)
# There's something here about thinking with your heart over your head but
# I can't quite put it together...
# Here I am just removing the column index names so the display fits on the doc
print(head(heart), row.names = FALSE)
knit_with_parameters('C:/Users/hannar1/Desktop/CHOP R User Group/CHOP R User Group/CHOP R User Group/CHOP R User Group.Rmd', encoding = 'UTF-8')
knit_with_parameters('C:/Users/hannar1/Desktop/CHOP R User Group/CHOP R User Group/CHOP R User Group/CHOP R User Group.Rmd', encoding = 'UTF-8')
knit_with_parameters('C:/Users/hannar1/Desktop/CHOP R User Group/CHOP R User Group/CHOP R User Group/CHOP R User Group.Rmd', encoding = 'UTF-8')
knit_with_parameters('C:/Users/hannar1/Desktop/CHOP R User Group/CHOP R User Group/CHOP R User Group/CHOP R User Group.Rmd', encoding = 'UTF-8')
length(heart)
nrow(heart)
knit_with_parameters('C:/Users/hannar1/Desktop/CHOP R User Group/CHOP R User Group/CHOP R User Group/CHOP R User Group.Rmd', encoding = 'UTF-8')
# Sample Logistic Regression with `heart` dataset
set.seed(101) # Set a seed so results can be reproducible
# Remove the Gender column which is a duplicate of the sex column,
# name this `heart.ml`
heart.ml <- heart
heart.ml$Gender <- NULL
# Create a sample train and test split of the data using the `caTools` package
sample <- sample.int(n = nrow(heart.ml), size = floor(.75*nrow(heart.ml)), replace = F)
train <- heart.ml[sample, ]
test  <- heart.ml[-sample, ]
# Fit a logistic regression model to the training dataset
model <- glm(target ~.,family=binomial(link='logit'),data=train)
# Assess the results of the model
summary(model)
# Test model accuracy
fitted.results <- predict(model,newdata=test[1:13],type='response')
fitted.results <- ifelse(fitted.results > 0.5,1,0)
fitted.results != test$target
fitted.results
mean(fitted.results != test$target)
fitted.results != test$target
sum(fitted.results != test$target)
length(fitted.results)
11/76
predict(model,newdata=test[1:13],type='response')
p <- predict(model, newdata=test[1:13], type="response")
pr <- prediction(p, test$target)
prf <- performance(pr, measure = "tpr", x.measure = "fpr")
plot(prf)
auc <- performance(pr, measure = "auc")
auc <- auc@y.values[[1]]
auc
auc
knit_with_parameters('C:/Users/hannar1/Desktop/CHOP R User Group/CHOP R User Group/CHOP R User Group/CHOP R User Group.Rmd', encoding = 'UTF-8')
knit_with_parameters('C:/Users/hannar1/Desktop/CHOP R User Group/CHOP R User Group/CHOP R User Group/CHOP R User Group.Rmd', encoding = 'UTF-8')
knit_with_parameters('C:/Users/hannar1/Desktop/CHOP R User Group/CHOP R User Group/CHOP R User Group/CHOP R User Group.Rmd', encoding = 'UTF-8')
p <- predict(model, newdata=test[1:13], type="response")
pr <- prediction(p, test$target)
prf <- performance(pr, measure = "tpr", x.measure = "fpr")
plot(prf)
auc <- performance(pr, measure = "auc")
auc <- auc@y.values[[1]]
print(paste('AUC Value: ' auc))
print(paste('AUC Value: ' auc))
print(paste('AUC Value: ', auc))
# Print the rate of correct predictions as accuracy
print(paste('Accuracy',round(1-misClasificError,4))
# Print the rate of correct predictions as accuracy
print(paste('Accuracy',round(1-misClasificError,4))
# Test model accuracy
# Use `predict()` to run the model on we created on the test dataset using the
# initial 13 variables.
fitted.results <- predict(model,newdata=test[1:13],type='response')
# Assign all values >0.5 to "1" and all values <=0.5 to "0"
fitted.results <- ifelse(fitted.results > 0.5,1,0)
# Determine the rate at which our predicted results to not match the true results
misClasificError <- mean(fitted.results != test$target)
# Print the rate of correct predictions as accuracy
print(paste('Accuracy',round(1-misClasificError,4))
# Print the rate of correct predictions as accuracy
print(paste('Accuracy: ',round(1-misClasificError,4))
# Test model accuracy
# Use `predict()` to run the model on we created on the test dataset using the
# initial 13 variables.
fitted.results <- predict(model,newdata=test[1:13],type='response')
# Test model accuracy
# Use `predict()` to run the model on we created on the test dataset using the
# initial 13 variables.
fitted.results <- predict(model,newdata=test[1:13],type='response')
# Assign all values >0.5 to "1" and all values <=0.5 to "0"
fitted.results <- ifelse(fitted.results > 0.5,1,0)
# Determine the rate at which our predicted results to not match the true results
misClasificError <- mean(fitted.results != test$target)
# Print the rate of correct predictions as accuracy
# Test model accuracy
# Use `predict()` to run the model on we created on the test dataset using the
# initial 13 variables.
fitted.results <- predict(model,newdata=test[1:13],type='response')
# Assign all values >0.5 to "1" and all values <=0.5 to "0"
fitted.results <- ifelse(fitted.results > 0.5,1,0)
# Determine the rate at which our predicted results to not match the true results
misClasificError <- mean(fitted.results != test$target)
# Print the rate of correct predictions as accuracy
print(paste('Accuracy: ',round(1-misClasificError,4))
# Test model accuracy
# Use `predict()` to run the model on we created on the test dataset using the
# initial 13 variables.
fitted.results <- predict(model,newdata=test[1:13],type='response')
# Assign all values >0.5 to "1" and all values <=0.5 to "0"
fitted.results <- ifelse(fitted.results > 0.5,1,0)
# Determine the rate at which our predicted results to not match the true results
misClasificError <- mean(fitted.results != test$target)
# Print the rate of correct predictions as accuracy
print(paste('Accuracy: ', round(1-misClasificError,4)))
# Test model accuracy
# Use `predict()` to run the model on we created on the test dataset using the
# initial 13 variables.
fitted.results <- predict(model,newdata=test[1:13],type='response')
# Assign all values >0.5 to "1" and all values <=0.5 to "0"
fitted.results <- ifelse(fitted.results > 0.5,1,0)
# Determine the rate at which our predicted results to not match the true results
misClasificError <- mean(fitted.results != test$target)
# Print the rate of correct predictions as accuracy
print(paste('Accuracy: ', round(1-misClasificError, 4, "%")*100))
round(1-misClasificError, 4, "%")*100
# Print the rate of correct predictions as accuracy
print(paste('Accuracy: ', round(1-misClasificError, 4)*100, "%"))
p <- predict(model, newdata=test[1:13], type="response")
pr <- prediction(p, test$target)
prf <- performance(pr, measure = "tpr", x.measure = "fpr")
plot(prf)
auc <- performance(pr, measure = "auc")
auc <- auc@y.values[[1]]
print(paste('AUC Value: ', round(auc, 4)))
print(paste('AUC Value: ', round(auc, 4)))
knit_with_parameters('C:/Users/hannar1/Desktop/CHOP R User Group/CHOP R User Group/CHOP R User Group/CHOP R User Group.Rmd', encoding = 'UTF-8')
knit_with_parameters('C:/Users/hannar1/Desktop/CHOP R User Group/CHOP R User Group/CHOP R User Group/CHOP R User Group.Rmd', encoding = 'UTF-8')
knit_with_parameters('C:/Users/hannar1/Desktop/CHOP R User Group/CHOP R User Group/CHOP R User Group/CHOP R User Group.Rmd', encoding = 'UTF-8')
knit_with_parameters('C:/Users/hannar1/Desktop/CHOP R User Group/CHOP R User Group/CHOP R User Group/CHOP R User Group.Rmd', encoding = 'UTF-8')
knit_with_parameters('C:/Users/hannar1/Desktop/CHOP R User Group/CHOP R User Group/CHOP R User Group/CHOP R User Group.Rmd', encoding = 'UTF-8')
